buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.3.1")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'docker'
apply plugin: 'war'

group = 'conorheffron'
version = '4.2.13'
description = "Sample Data Manager"

sourceCompatibility = 21
targetCompatibility = 21
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-maven-plugin', version: '3.3.1'
    implementation group: 'com.rabbitmq', name: 'amqp-client', version: '5.21.0'
    implementation group: 'io.searchbox', name: 'jest', version:'6.3.1'
    implementation group: 'org.elasticsearch', name: 'elasticsearch', version:'8.14.2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version:'3.3.1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version:'3.3.1'
    implementation group: 'mysql', name: 'mysql-connector-java', version:'8.0.33'
    implementation group: 'com.sparkpost', name: 'sparkpost-lib', version:'0.27'
    implementation group: 'com.h2database', name: 'h2', version:'2.2.224'
    implementation group: 'org.apache.maven.reporting', name: 'maven-reporting-api', version:'3.1.1'
    implementation group: 'org.jacoco', name: 'jacoco-maven-plugin', version:'0.8.12'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version:'3.3.1'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version:'10.1.25'
    implementation group: 'javax.servlet', name: 'servlet-api', version: '2.5'
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:'3.3.1') {
		exclude(module: 'commons-logging')
    }
}

test {
    // show standard out and standard error of the test JVM(s) on the console, without this
    // the text output printed by the tests won't show.
    // ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    testLogging.showStandardStreams = true
    def testCount = 0
    afterTest { descriptor, result ->
        // descriptor is of type TestDescriptor, result is of type TestResult
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestDescriptor.html
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestResult.html
        logger.lifecycle("Test {count: ${++testCount} name: $descriptor.name result: $result.resultType}")
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

integrationTest {
    // show standard out and standard error of the test JVM(s) on the console, without this
    // the text output printed by the tests won't show.
    // ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    testLogging.showStandardStreams = true
    def testCount = 0
    afterTest { descriptor, result ->
        // descriptor is of type TestDescriptor, result is of type TestResult
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestDescriptor.html
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestResult.html
        logger.lifecycle("Test {count: ${++testCount} name: $descriptor.name result: $result.resultType}")
    }
}

task buildDocker(type: Docker, dependsOn: build) {
  applicationName = war.archiveBaseName
  dockerfile = file('Dockerfile')
  doFirst {
    copy {
      from war
      into "${stageDir}/target"
    }
  }
}
