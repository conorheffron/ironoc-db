buildscript {
    ext {
        springBootVersion = '3.5.6'
		mockitoVersion = '5.20.0'
    }
    repositories {
        mavenCentral()
		gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:6.3.1.5724")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

sonar {
	properties {
		property "sonar.projectKey", "conorheffron_ironoc-db"
		property "sonar.organization", "conorheffron"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.sources", ["src/test", "src/main/java"]
		property "sonar.tests", ["src/test", "src/integration-test"]
		property "sonar.test.inclusions", "**/*Test.java"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src/main/java"
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

group = 'conorheffron'
version = '7.0.2'
description = "iRonoc-DB Sample Data Manager"

java {
	sourceCompatibility = JavaVersion.VERSION_25
	targetCompatibility = JavaVersion.VERSION_25
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.42'
    annotationProcessor 'org.projectlombok:lombok:1.18.42'

    // Spring
    implementation 'org.springframework.boot:spring-boot-maven-plugin:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-web:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-tomcat:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-validation:' + springBootVersion

    // GC Secret Manager
    implementation 'com.google.cloud:google-cloud-secretmanager:2.76.0'

    // SQL
    implementation group: 'mysql', name: 'mysql-connector-java', version:'8.0.33'
    implementation group: 'com.h2database', name: 'h2', version:'2.4.240'

    implementation group: 'org.apache.maven.reporting', name: 'maven-reporting-api', version:'4.0.0'
	implementation group: 'org.jacoco', name: 'jacoco-maven-plugin', version:'0.8.14'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version:'11.0.12'
    implementation group: 'org.glassfish.web', name: 'jakarta.servlet.jsp.jstl', version: '3.0.1'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
		exclude(module: 'commons-logging')
		exclude(module: 'mockito-core')
    }

	testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
	testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.17.8'
}

test {
	jvmArgs "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('mockito-core') }.absolutePath}"
    // show standard out and standard error of the test JVM(s) on the console, without this
    // the text output printed by the tests won't show.
    // ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    testLogging.showStandardStreams = true
    def testCount = 0
    afterTest { descriptor, result ->
        // descriptor is of type TestDescriptor, result is of type TestResult
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestDescriptor.html
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestResult.html
        logger.lifecycle("Test {count: ${++testCount} name: $descriptor.name result: $result.resultType}")
    }
}

task integrationTest(type: Test) {
	jvmArgs "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('mockito-core') }.absolutePath}"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
	finalizedBy jacocoTestReport
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

jacocoTestReport {
    reports {
        xml.required = true
    }
}

integrationTest {
    // show standard out and standard error of the test JVM(s) on the console, without this
    // the text output printed by the tests won't show.
    // ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    testLogging.showStandardStreams = true
    def testCount = 0
    afterTest { descriptor, result ->
        // descriptor is of type TestDescriptor, result is of type TestResult
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestDescriptor.html
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestResult.html
        logger.lifecycle("Test {count: ${++testCount} name: $descriptor.name result: $result.resultType}")
    }
}

// Build executable war file
tasks.war {
    enabled = true
    // Remove `plain` postfix from war file name
    archiveClassifier.set("")
}

publishing {
    repositories {
        maven {
            name = "Github"
            url = uri("https://maven.pkg.github.com/conorheffron/ironoc-db")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
    }
    publications {
        mavenWeb(MavenPublication) {
		    from components.web
	    }
    }
}

springBoot {
    buildInfo()
}
