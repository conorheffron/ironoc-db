ext {
	springBootVersion = '3.5.6'
}

plugins{
	id 'java'
	id 'org.springframework.boot'
	id 'eclipse'
	id 'idea'
	id 'war'
	id 'maven-publish'
	id 'org.sonarqube' version "6.3.1.5724" // Use the latest version
	id 'jacoco'
}

sonarqube {
  properties {
    property "sonar.projectKey", "conorheffron_ironoc-db"
    property "sonar.organization", "conorheffron"
    property "sonar.reportPath" , "${project.buildDir}/jacoco/test.exec"
  }
}

group = 'conorheffron'
version = '6.4.6'
description = "Sample Data Manager"

sourceCompatibility = 24
targetCompatibility = 24
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.42'
    annotationProcessor 'org.projectlombok:lombok:1.18.42'

    // Spring
    implementation 'org.springframework.boot:spring-boot-maven-plugin:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-web:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-tomcat:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-validation:' + springBootVersion

    // GC Secret Manager
    implementation 'com.google.cloud:google-cloud-secretmanager:2.75.0'

    // SQL
    implementation group: 'mysql', name: 'mysql-connector-java', version:'8.0.33'
    implementation group: 'com.h2database', name: 'h2', version:'2.4.240'

    implementation group: 'org.apache.maven.reporting', name: 'maven-reporting-api', version:'4.0.0'
	implementation group: 'org.jacoco', name: 'jacoco-maven-plugin', version:'0.8.13'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version:'11.0.11'
    implementation group: 'org.glassfish.web', name: 'jakarta.servlet.jsp.jstl', version: '3.0.1'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
		exclude(module: 'commons-logging')
    }
}

test {
    // show standard out and standard error of the test JVM(s) on the console, without this
    // the text output printed by the tests won't show.
    // ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    testLogging.showStandardStreams = true
    def testCount = 0
    afterTest { descriptor, result ->
        // descriptor is of type TestDescriptor, result is of type TestResult
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestDescriptor.html
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestResult.html
        logger.lifecycle("Test {count: ${++testCount} name: $descriptor.name result: $result.resultType}")
    }
	useJUnitPlatform()
    reports {
		junitXml.getRequired().set(true)
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

jacocoTestReport {
    reports {
        xml.required = true
    }
}

jacocoTestReport.mustRunAfter integrationTest

integrationTest {
    // show standard out and standard error of the test JVM(s) on the console, without this
    // the text output printed by the tests won't show.
    // ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    testLogging.showStandardStreams = true
    def testCount = 0
    afterTest { descriptor, result ->
        // descriptor is of type TestDescriptor, result is of type TestResult
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestDescriptor.html
        // ref: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestResult.html
        logger.lifecycle("Test {count: ${++testCount} name: $descriptor.name result: $result.resultType}")
    }
}

// Build executable war file
tasks.war {
    enabled = true
    // Remove `plain` postfix from war file name
    archiveClassifier.set("")
}

publishing {
    repositories {
        maven {
            name = "Github"
            url = uri("https://maven.pkg.github.com/conorheffron/ironoc-db")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
    }
    publications {
        mavenWeb(MavenPublication) {
		    from components.web
	    }
    }
}

springBoot {
    buildInfo()
}
